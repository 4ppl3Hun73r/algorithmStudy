package dec;

// https://leetcode.com/problems/domino-and-tromino-tiling/
public class Solution1210 {
    public int numTilings(int n) {
        int m = (int) (1e9) + 7;
        // n이 들어오면 2 x n board에 만들 수 있는 조합의 수
        /*
        조합에 사용되는 타일은
        [ ][ ]

        [ ][ ]
        [ ]
        회전 가능
        지호 : 원리는 모르고 답만 가져다 써서 풀었습니다.
              f(x) = ......
              이래서 DP 문제를 안좋아해...
              이래서 딥러닝이 미래다.
        1
        [1]
        [1]

        2
        [1][2]
        [1][2]

        [1][1]
        [2][2]

        3
        [1][2][3]
        [1][2][3]

        [1][2][2]
        [1][3][3]

        [1][1][3]
        [2][2][3]

        [1][1][2]
        [1][2][2]

        [1][2][2]
        [1][1][2]

        4
        [1][2][3][4]
        [1][2][3][4]

        [1][2][2][4]
        [1][3][3][4]

        [1][1][3][4]
        [2][2][3][4]

        [1][1][2][3]
        [1][2][2][3]

        [1][2][2][3]
        [1][1][2][3]

        [1][2][2][3]
        [1][1][2][3]

        [1][1][3][3]
        [1][2][2][3]

        [1][2][2][3]
        [1][1][3][3]

        [1][2][2][4][4][3]
        [1][1][5][5][3][3]

        [1][1][5][5][3][3]
        [1][2][2][4][4][3]

        [1][2][2][4][4][3]
        [1][1][5][5][3][3]

        [1][2][2][6][6][4][4][3]
        [1][1][5][5][7][7][3][3]

        dp[0] = 0
        dp[1] = 1
        dp[2] = 2
        dp[3] = 5   => 상수 f(3) = 5, f(2) = 2 f(1) = 1 f(0) = 0 일때 f(x) 를 찾으시오.
        dp[4] = 11  => 10 - 11 = 1
        dp[5] = 24  => 22 - 24 = -2
        dp[6] = 53  => 48 - 53 = -5
        dp[7] = 117 => 106 - 117 = -11
        dp[8] = ??? => f(x) = f(x - 1) * 2 + f(x - 3)
        dp[9] = ???
        dp[10]= ????
         */

        /*
        DP?

        dp[0] = 0
        dp[1] = 1
        dp[2] = 2 dp[1] * 2 + 0
        dp[3] = 5 dp[2] * 2 + 1
        dp[4] = 11 dp[3] * 2 + 1
        dp[5] = 24 dp[4] * 2 + 2
        dp[6] = 53 dp[5] * 2 + 5
        dp[7] = 117 dp[6] * 2 + 11
        dp[8] = 258 dp[7] * 2 + 24
        dp[9] = 569 dp[8] * 2 + 53
        dp[10] = 1255 dp[9] * 2 + 117
        dp[11] = 2768
        dp[12] = 6105
        dp[13] = 13465
        dp[14] = 29698
        dp[15] = 65501
        dp[16] = 144467
        dp[17] = 318632
        dp[18] = 702765
        dp[19] = 1549997
        dp[20] = 3418626 dp[19] * 2 + dp[17]
         */
        int len = Math.max(4, n + 1);

        long[] dp = new long[len];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 5;
        for (int i = 4; i <= n; i++) {
            dp[i] = (dp[i - 1] * 2 + dp[i - 3])%m;
        }

        return (int)(dp[n]%m);
    }
}
