package y2022.may;

import java.util.Arrays;

// https://leetcode.com/problems/ones-and-zeroes/
public class Solution0523 {
    public int findMaxForm(String[] strs, int m, int n) {
        /*
        strs = 0, 1로 이뤄진 문자열 배열
         m개의 0과, n개의 1이 넘지 않는 가장 긴 subset 의 길이를 반환

        ["10","0","1"]
        m = 1, n = 1
        {{10}},  -> length 1
        {{0}, {1}} -> length 2 -> max(1, 2)

        ["10","0001","111001","1","0"]
        m = 5, n = 3

        {"10", "0001", "1", "0"} -> 4
         */
        

        /*
         "10","0001","111001","1","0"
         0, 10, 111001, 0001, 1
         m = 5, n = 3

         0, 10, 0001 1

         dp[현재값] = dp[과거의값] + 1;

         dp[zero][one] ->
           0  1  2  3   //1
         0[0, 0, 0, 0]
         1[0,  ,  ,  ]
         2[0,  ,  ,  ]  1
         3[0, 1,  ,  ]
         4[0,  ,  ,  ]
         5[0,  ,  ,  ]
         //
         0

        dp[5][5] = Math.max(dp[5][5], dp[2][4] + 1);
         "0001" -> 1이 한개, 0이 3개, dp[기준값 - 1이 한개][기준값 - 0이 3개] + 1;
         countZero = 3, countOne = 1
         dp[5][3] = Math.max(dp[5][3], dp[2][2] + 1);

        dp[채우려는값 0의 값] =
        dp[0의 갯수][1의 갯수] = dp
        "10"  -> "10", "1", "0"
         str => 111001 -> [2, 4]
         "10",  [1,1]
         "0001",
         "111001",
         "1",
         "0"
         return dp[M][N];
         */
        int[][] dp = new int[m + 1][n + 1];

        for (String str : strs) {
            int countZero = 0;
            int countOne = 0;
            for (int i = 0; i < str.length(); i++) {
                if (str.charAt(i) == '0') {
                    countZero++;
                } else {
                    countOne++;
                }
            }

            System.out.println(str);
            for (int i = m; i >= countZero; i--) {
                for (int j = n; j >= countOne; j--) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - countZero][j - countOne] + 1);
                    System.out.println(Arrays.deepToString(dp).replaceAll("],", "\n"));
                }
            }
            System.out.println();
        }

        return dp[m][n];
    }
    /*
    dp[5][3] = 1,
10, 0001
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 0, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 0, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 0, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 0, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1]]

0001
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 2
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2]]

111001

1
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 1, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 1, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 1, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 0
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 0, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 0, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 3]]

0
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 2, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 1, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [0, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 2, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 1, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [0, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 2, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 1, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [0, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 1, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [0, 2, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]
[[0, 1, 1, 1
 [1, 2, 2, 2
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 3
 [1, 2, 3, 4]]

4
     */

    public static void main(String[] args) throws Exception {
        Solution0523 s = new Solution0523();

        System.out.println(s.findMaxForm(new String[]{"10","0001","111001","1","0"}, 5, 3));
    }
}
