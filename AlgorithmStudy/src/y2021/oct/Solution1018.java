package y2021.oct;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

// https://leetcode.com/problems/next-greater-element-i/
public class Solution1018 {

    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        // O(N + M) gg
        // O(M^2)

        // Array, hash table, stack, monotonic stack
        //
        // [130, 60, 90, 120, 150, 1, 2, 3, 4]
        // [150, 90, 120, 150, -1, 2, 3, 4, -1]

        // [137,59,92,122,52,131,79,236,94,171,141,86,169,199,248,120,196,168,77,71,5,198,215,230,176,87,189,206,115,76,13,216,197,26,183,54,250,27,109,140,147,25,96,105,30,207,241,8,217,40,0,35,221,191,83,132,9,144,12,91,175,65,170,149,174,82,102,167,62,70,44,143,10,153,160,142,188,81,146,212,15,162,103,163,123,48,245,116,192,14,211,126,63,180,88,155,224,148,134,158,119,165,130,112,166,93,125,1,11,208,150,100,106,194,124,2,184,75,113,104,18,210,202,111,84,223,173,238,41,33,154,47,244,232,249,60,164,227,253,56,157,99,179,6,203,110,127,152,252,55,185,73,67,219,22,156,118,234,37,193,90,187,181,23,220,72,255,58,204,7,107,239,42,139,159,95,45,242,145,172,209,121,24,21,218,246,49,46,243,178,64,161,117,20,214,17,114,69,182,85,229,32,129,29,226,136,39,36,233,43,240,254,57,251,78,51,195,98,205,108,61,66,16,213,19,68,237,190,3,200,133,80,177,97,74,138,38,235,135,186,89,201,4,101,151,31,228,231,34,225,28,222,128,53,50,247]
        // [137,59,92,122,52,131,79,236,94,171,141,86,169,199,248,120,196,168,77,71,5,198,215,230,176,87,189,206,115,76,13,216,197,26,183,54,250,27,109,140,147,25,96,105,30,207,241,8,217,40,0,35,221,191,83,132,9,144,12,91,175,65,170,149,174,82,102,167,62,70,44,143,10,153,160,142,188,81,146,212,15,162,103,163,123,48,245,116,192,14,211,126,63,180,88,155,224,148,134,158,119,165,130,112,166,93,125,1,11,208,150,100,106,194,124,2,184,75,113,104,18,210,202,111,84,223,173,238,41,33,154,47,244,232,249,60,164,227,253,56,157,99,179,6,203,110,127,152,252,55,185,73,67,219,22,156,118,234,37,193,90,187,181,23,220,72,255,58,204,7,107,239,42,139,159,95,45,242,145,172,209,121,24,21,218,246,49,46,243,178,64,161,117,20,214,17,114,69,182,85,229,32,129,29,226,136,39,36,233,43,240,254,57,251,78,51,195,98,205,108,61,66,16,213,19,68,237,190,3,200,133,80,177,97,74,138,38,235,135,186,89,201,4,101,151,31,228,231,34,225,28,222,128,53,50,247]
        // [236,92,122,131,131,236,236,248,171,199,169,169,199,248,250,196,198,198,198,198,198,215,230,250,189,189,206,216,216,216,216,250,250,183,250,250,253,109,140,147,207,96,105,207,207,241,245,217,221,221,35,221,245,212,132,144,144,175,91,175,188,170,174,174,188,102,167,188,70,143,143,153,153,160,188,188,212,146,212,245,162,163,163,245,245,245,249,192,211,211,224,180,180,224,155,224,238,158,158,165,165,166,166,166,208,125,208,11,208,210,194,106,194,210,184,184,210,113,210,210,210,223,223,223,223,238,238,244,154,154,244,244,249,249,253,164,227,253,255,157,179,179,203,203,252,127,152,252,255,185,219,219,219,234,156,234,234,255,193,220,187,220,220,220,255,255,-1,204,239,107,239,242,139,159,242,242,242,246,172,209,218,218,218,218,246,254,243,243,254,214,161,214,214,214,229,114,182,182,229,229,233,129,226,226,233,233,233,233,240,240,254,-1,251,-1,195,195,205,205,213,213,66,213,213,237,68,237,247,200,200,235,177,177,235,138,138,235,235,247,186,201,201,228,101,151,228,228,231,247,225,247,222,247,24...
        // [247,92,122,247,131,247,236,247,171,247,247,169,199,248,-1,196,247,247,247,247,198,215,230,247,247,189,206,247,247,247,216,247,247,183,247,250,-1,109,140,147,247,96,105,247,207,241,247,217,247,247,35,221,247,247,132,247,144,247,91,175,247,170,247,174,247,102,167,247,70,247,143,247,153,160,247,188,247,146,212,247,162,247,163,247,247,245,247,192,247,211,247,247,180,247,155,224,247,247,158,247,165,247,247,166,247,125,247,11,208,247,247,106,194,247,247,184,247,113,247,247,210,247,247,247,223,247,238,247,247,154,247,244,247,249,-1,164,227,253,-1,157,247,179,247,203,247,127,152,252,-1,185,247,247,219,247,156,247,234,247,193,247,187,247,247,220,247,255,-1,204,247,107,239,247,139,159,247,247,242,247,172,209,247,247,247,218,246,247,247,243,247,247,161,247,247,214,247,114,247,182,247,229,247,129,247,226,247,247,247,233,247,240,254,-1,251,-1,247,195,247,205,247,247,66,247,213,247,68,237,247,247,200,247,247,177,247,247,138,247,235,247,186,247,201,247,101,151,247,228,231,247,225,247,222,247,247,247...
        // [ 5, 4, 3, 2, 1, 6]
        // O(M)
        Map<Integer, Integer> map = new HashMap<>();
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < nums2.length; i++) {
            while (!stack.isEmpty() && nums2[i] > stack.peek()) {
                map.put(stack.pop(), nums2[i]);
            } // O(??) O(2M) => O(M)
            stack.push(nums2[i]);
        }
        /*
          [10,9,8,7,6,11] -> 넣는데M + 꺼내는데M // bbb
          [137, 93, 92, 122, 138]
           122
           92  <----     i = 3
           93
           137   nums[1]  <- i=1
                 nums[0]

           122
           137
           S
           M, 92 - 122, 93 - 122

           138
           S
           M, 92 - 122, 93 - 122, 122 -138, 137 - 138
         */

        // O(N)
        for (int i = 0; i < nums1.length; i++) {
            nums1[i] = map.getOrDefault(nums1[i], -1);
        }

        return nums1;
    }
}
